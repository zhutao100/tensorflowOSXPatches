diff --git a/Makefile b/Makefile
index c37b7f7..2ebe2ed 100644
--- a/Makefile
+++ b/Makefile
@@ -17,6 +17,12 @@ CUDA_LIB ?= $(CUDA_HOME)/lib64
 CUDA_INC ?= $(CUDA_HOME)/include
 NVCC ?= $(CUDA_HOME)/bin/nvcc
 
+UNAME := $(shell uname)
+
+ifeq ($(UNAME), Darwin)
+CUDA_LIB = $(CUDA_HOME)/lib
+endif
+
 NVCC_GENCODE ?= -gencode=arch=compute_35,code=sm_35 \
                 -gencode=arch=compute_50,code=sm_50 \
                 -gencode=arch=compute_52,code=sm_52 \
@@ -27,7 +33,11 @@ NVCC_GENCODE ?= -gencode=arch=compute_35,code=sm_35 \
 CXXFLAGS   := -I$(CUDA_INC) -fPIC -fvisibility=hidden
 NVCUFLAGS  := -ccbin $(CXX) $(NVCC_GENCODE) -lineinfo -std=c++11 -maxrregcount 96
 # Use addprefix so that we can specify more than one path
-LDFLAGS    := $(addprefix -L,${CUDA_LIB}) -lcudart -lrt
+LDFLAGS    := $(addprefix -L,${CUDA_LIB}) -lcudart
+
+ifeq ($(UNAME), Linux)
+LDFLAGS += -lrt
+endif
 
 ifeq ($(DEBUG), 0)
 NVCUFLAGS += -O3
@@ -57,7 +67,14 @@ NCCL_MINOR   := 3
 NCCL_PATCH   := 5
 CXXFLAGS  += -DNCCL_MAJOR=$(NCCL_MAJOR) -DNCCL_MINOR=$(NCCL_MINOR) -DNCCL_PATCH=$(NCCL_PATCH)
 
+
+
+ifeq ($(UNAME), Darwin)
+CUDA_VERSION = $(shell $(NVCC) --version | tail -1 | sed "s/.*, V//")
+else
 CUDA_VERSION ?= $(shell ls $(CUDA_LIB)/libcudart.so.* | head -1 | rev | cut -d "." -f -2 | rev)
+endif
+
 CUDA_MAJOR = $(shell echo $(CUDA_VERSION) | cut -d "." -f 1)
 CUDA_MINOR = $(shell echo $(CUDA_VERSION) | cut -d "." -f 2)
 CXXFLAGS  += -DCUDA_MAJOR=$(CUDA_MAJOR) -DCUDA_MINOR=$(CUDA_MINOR)
@@ -67,7 +84,11 @@ CXXFLAGS  += -DCUDA_MAJOR=$(CUDA_MAJOR) -DCUDA_MINOR=$(CUDA_MINOR)
 
 INCEXPORTS  := nccl.h
 LIBSRCFILES := libwrap.cu core.cu all_gather.cu all_reduce.cu broadcast.cu reduce.cu reduce_scatter.cu
+ifeq ($(UNAME), Darwin)
+LIBNAME     := libnccl.dylib
+else
 LIBNAME     := libnccl.so
+endif
 STATICLIBNAME := libnccl_static.a
 
 INCDIR := $(BUILDDIR)/include
@@ -75,13 +96,26 @@ LIBDIR := $(BUILDDIR)/lib
 OBJDIR := $(BUILDDIR)/obj
 
 INCTARGETS := $(patsubst %, $(INCDIR)/%, $(INCEXPORTS))
+STATICLIBTARGET := $(STATICLIBNAME)
+ifeq ($(UNAME), Darwin)
+LIBSONAME  := $(patsubst %.dylib,%.$(NCCL_MAJOR).dylib,$(LIBNAME))
+LIBTARGET  := $(patsubst %.dylib,%.$(NCCL_MAJOR).$(NCCL_MINOR).$(NCCL_PATCH).dylib,$(LIBNAME))
+LIBLINK    := $(patsubst lib%.dylib, -l%, $(LIBNAME))
+else
 LIBSONAME  := $(patsubst %,%.$(NCCL_MAJOR),$(LIBNAME))
 LIBTARGET  := $(patsubst %,%.$(NCCL_MAJOR).$(NCCL_MINOR).$(NCCL_PATCH),$(LIBNAME))
-STATICLIBTARGET := $(STATICLIBNAME)
 LIBLINK    := $(patsubst lib%.so, -l%, $(LIBNAME))
+endif
 LIBOBJ     := $(patsubst %.cu, $(OBJDIR)/%.o, $(filter %.cu, $(LIBSRCFILES)))
 DEPFILES   := $(patsubst %.o, %.d, $(LIBOBJ)) $(patsubst %, %.d, $(TESTBINS)) $(patsubst %, %.d, $(MPITESTBINS))
 
+CXX_IS_CLANG = $(shell $(CXX) --version | grep "clang" | wc -l)
+ifneq ($(strip $(CXX_IS_CLANG)), 0)
+LINK_SHARED_STRING = 
+else
+LINK_SHARED_STRING = -Wl,--no-as-needed -Wl,-soname,$(LIBSONAME)
+endif
+
 all : lib staticlib
 
 lib : $(INCTARGETS) $(LIBDIR)/$(LIBTARGET)
@@ -93,7 +127,7 @@ staticlib : $(INCTARGETS) $(LIBDIR)/$(STATICLIBTARGET)
 $(LIBDIR)/$(LIBTARGET) : $(LIBOBJ)
 	@printf "Linking   %-35s > %s\n" $(LIBTARGET) $@
 	mkdir -p $(LIBDIR)
-	$(CXX) $(CXXFLAGS) -shared -Wl,--no-as-needed -Wl,-soname,$(LIBSONAME) -o $@ $(LDFLAGS) $(LIBOBJ)
+	$(CXX) $(CXXFLAGS) -shared $(LINK_SHARED_STRING) -o $@ $(LDFLAGS) $(LIBOBJ)
 	ln -sf $(LIBSONAME) $(LIBDIR)/$(LIBNAME)
 	ln -sf $(LIBTARGET) $(LIBDIR)/$(LIBSONAME)
 
diff --git a/src/primitives.h b/src/primitives.h
index bcaeca8..5ebab45 100644
--- a/src/primitives.h
+++ b/src/primitives.h
@@ -8,9 +8,17 @@
 #define PRIMITIVES_H_
 
 #include <type_traits>
+#include <cstddef>  // for nullptr_t
 #include "copy_kernel.h" // for FuncPassA
 #include "reduce_kernel.h" // for reduction funcs
 
+#ifdef __APPLE__
+// Workaround for Mac OS: when tested on Apple clang 8.0.0 and Mac OSX 10.12
+// with cuda 8.0, the host compiler did not correctly declare nullptr_t
+// although it is specified by the C++11 standard. We thus explicitly declare
+// it here.
+typedef decltype(nullptr) nullptr_t;
+#endif  // __APPLE__
 
 /* Defines primitive operations: Copy, Reduce, DoubleCopy, and ReduceCopy.
  *
